package goodness

import (
	"testing"

	"github.com/doctordesh/check"
	"github.com/doctordesh/goodness/bits"
)

// func TestProtocolParsing(t *testing.T) {
// 	b := []byte{116, 237, 1, 32, 0, 1, 0, 0, 0, 0, 0, 1, 6, 103, 111, 111, 103, 108, 101, 3, 99, 111, 109, 0, 0, 1, 0, 1, 0, 0, 41, 16, 0, 0, 0, 0, 0, 0}

// 	m := Message{Data: b}

// 	check.Equals(t, 29933, m.ID())
// 	check.Equals(t, QR_QUERY, m.QR())
// 	check.Equals(t, OPCODE_QUERY, m.OPCODE())
// 	check.Equals(t, false, m.AA())
// 	check.Equals(t, false, m.TC())
// 	check.Equals(t, false, m.RD())
// }

func TestProtocolParsingHeader(t *testing.T) {
	b := []byte{0xFF, 0x00}
	b = append(b, 0b10010111)
	b = append(b, 0b10000101)
	b = append(b, 0x00, 0xF0)
	b = append(b, 0x00, 0xF1)
	b = append(b, 0x00, 0xF2)
	b = append(b, 0x00, 0xF3)

	m := Message{Data: b}

	check.Equals(t, 65280, m.ID())
	check.Equals(t, QR_RESPONSE, m.QR())
	check.Equals(t, OPCODE_STATUS, m.OPCODE())
	check.Equals(t, true, m.AA())
	check.Equals(t, true, m.TC())
	check.Equals(t, true, m.RD())
	check.Equals(t, true, m.RA())
	check.Equals(t, 0, m.Z())
	check.Equals(t, RCODE_REFUSED, m.RCODE())

	check.Equals(t, 240, m.QDCOUNT())
	check.Equals(t, 241, m.ANCOUNT())
	check.Equals(t, 242, m.NSCOUNT())
	check.Equals(t, 243, m.ARCOUNT())
}

func TestSomething(t *testing.T) {
	t.Logf("\n%s", bits.AND(0b10010111, 0b01110000))
	t.Logf("\n%s", bits.OR(0b10010111, 0b01110000))
	t.Logf("\n%s", bits.XOR(0b10010111, 0b01110000))
	t.Logf("\n%s", bits.RSHIFT(0b01111000, 3))
	t.Logf("\n%s", bits.LSHIFT(0b00001111, 4))
}

func TestMessageSetQR(t *testing.T) {
	m := Message{Data: []byte{0, 0, 0, 0}}
	m.SetQR(QR_RESPONSE)
	check.Equals(t, byte(0b10000000), m.Data[2])

	m.SetRCODE(RCODE_REFUSED)
	check.Equals(t, byte(0x05), m.Data[3])

	// Make sure the first 4 bits are preserved
	m.Data[3] = 0xFF
	m.SetRCODE(RCODE_REFUSED)
	check.Equals(t, byte(0xF5), m.Data[3])
}

// var test_response_for_google_dot_com = []byte{0xa9, 0xa9, 0x81, 0x80, 0x0, 0x1, 0x0, 0x6, 0x0, 0x0, 0x0, 0x1, 0x6, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x87, 0x0, 0x4, 0x8e, 0xfa, 0x93, 0x71, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x87, 0x0, 0x4, 0x8e, 0xfa, 0x93, 0x65, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x87, 0x0, 0x4, 0x8e, 0xfa, 0x93, 0x8a, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x87, 0x0, 0x4, 0x8e, 0xfa, 0x93, 0x66, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x87, 0x0, 0x4, 0x8e, 0xfa, 0x93, 0x64, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x87, 0x0, 0x4, 0x8e, 0xfa, 0x93, 0x8b, 0x0, 0x0, 0x29, 0x4, 0xd0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

var test_response_for_google_dot_com = []byte{
	0xa9, 0xa9, 0x81, 0x80, // header
	0x00, 0x01, 0x00, 0x01, //
	0x00, 0x00, 0x00, 0x00, // end header
	// Start question
	0x06,                               // length of label
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, // 'google'
	0x03,             // length of label
	0x63, 0x6f, 0x6d, // 'com'
	0x00,       // end of labels (zero byte)
	0x00, 0x01, // qtype
	0x00, 0x01, // qclass
	// End question

	0xc0, 0x0c, // offset for label (12 in this case)
	0x00, 0x01, // type
	0x00, 0x01, // class
	0x00, 0x00, 0x00, 0xb5, // TTL
	0x00, 0x04, // Resource Data Length
	0x8e, 0xfa, 0x4a, 0x6e, // Resource Data (RDLength long)
}

func TestParsingMessage(t *testing.T) {
	var err error

	m := Message{Data: test_response_for_google_dot_com}
	m.Parse()

	_ = err

	t.Log(m.Questions)
}
